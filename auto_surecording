#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Auto-pilot SU recording for dorsal horn NS cell
 with Keithley 3390 waveform generator; Xcell3 amplifier; NIDAQ"""

import numpy as np
import os
import winsound
import time as time
import nidaqmx as daq
import pyvisa as visa
from threading import Timer


def exp_recd_para():
    # experiment record of time, recording condition
    # stimulation parameter of motor threshold and modification

    local_time = time.asctime(time.localtime(time.time()))

    try:
        exp_rcd_key = ['rat', 'neuron', 'depth', 'angle', 'electrode']
        exp_rcd_val = input(
            '\nRecording info, separated by space\n'
            '<#rat, #neuron, depth, angle, #electrode>\n'
        ).split()
        loc_exp_rcd = dict(zip(exp_rcd_key, exp_rcd_val))

        scs_para_key = ['scs_mt', 'scs_mod', 'scs_freq', 'scs_ontime', 'waveform', ]
        scs_para_val = input(
            '\nSCS parameters\n' 
            '<scs_mt(V), scs_mod(%), scs_freq, scs_ontime, waveform, >\n'
        ).split()
        scs_para_val[0:4] = list(map(float, scs_para_val[0:4]))
        loc_scs_para = dict(zip(scs_para_key, scs_para_val))

        sciatic_para_key = ['sciatic_mt', 'sciatic_mod', 'sciatic_freq', 'sciatic_pw', 'status']
        sciatic_para_val = input(
            '\nSciatic stimulation parameters\n'
            '<sciatic_mt, sciatic_mod, sciatic_freq, sciatic_pw, status(1/0)>\n'
        ).split()
        sciatic_para_val = map(float, sciatic_para_val)
        loc_sciatic_para = dict(zip(sciatic_para_key, sciatic_para_val))

    except ValueError:
        print('must input arg separated by space')

    else:
        print('\nexp_record\n'
              'neuron[{1}]/rat[{0}] at {2}\u00b5m/{3}\u00b0 with #{4} electrode\nat {5}'
              .format(*loc_exp_rcd.values(), local_time))
        print('\nSCS_para\n'
              'waveform: {4} at {2}Hz for {3}sec; MT:{0}V, mod:{1}%'
              .format(*loc_scs_para.values()))
        print('\nSciatic para\n'
              'sciatic stim at {2}Hz with pw={3}\u00b5s, switch={4}; MT:{0}V, mod:{1} X'
              .format(*loc_sciatic_para.values()))

    return loc_exp_rcd, loc_scs_para, loc_sciatic_para


def beep(n):
    # makes n beep sound in 1 second

    beep_freq = 1500  # Hz
    beep_dur = int(1000/n)  # ms

    for i in range(0, n):
        winsound.Beep(beep_freq, beep_dur)

    return


def countdown(sec):
    # display time countdown on screen in seconds

    while sec > 0:
        print(sec, ' sec ', end='\r')
        time.sleep(1)
        sec -= 1

    return


def resources():
    # check available resource in current computer

    daq_resource = []
    sys = daq.system.System()  # assign sys as a System object to access property [devices]

    for dev in sys.devices:
        daq_resource.append(dev)

    rm = visa.ResourceManager()

    print(' DAQ resource\n', daq_resource, '\n', 'VISA resource\n', list(rm.list_resources()))

    return


def io_notepad():

    f = open()

    pass

"""Configure Keithley 3390 to be ready to output SCS current, 
   triggered by TTL signal from NI-DAQ 6126 with logic high threshold > 2.5 V 
"""


def wavegen(waveform, scs_freq, scs_ontime, scs_mt, scs_mod):
    # Keithley 3390 configuration to be triggered/gated by NI-DAQ 6216 BNC with logic signal

    rm = visa.ResourceManager()  # assign NI backend as resource manager
    keithley = rm.open_resource('usb0::0x05E6::0x3390::1425019::INSTR')  # open keithley
    keithley.timeout = None
    keithley.write('*rst; *cls')  # reset to factory default, clear status command

    # define arbitrary waveform, burst/trigger, frequency/amplitude
    keithley.write('function user')
    keithley.write('function:user {0}'.format(str(waveform)))

    keithley.write('burst:state on')

    """trigger mode"""
    keithley.write('burst:mode triggered')
    keithley.write('burst:ncycles {0}'.format(str(scs_freq * scs_ontime)))

    """ gated mode
    keithley.write('burst:mode gated')
    keithley.write('burst:gate:polarity normal')
    """

    keithley.write('trigger:source external')
    keithley.write('trigger:slope positive')

    keithley.write('frequency {0}'.format(str(scs_freq)))
    keithley.write('voltage:unit vpp')
    keithley.write('voltage {0}'.format(str(scs_mt * scs_mod / 100)))

    keithley.close()  # close the instrument handle session

    return


def sciatic(status, sciatic_mt, sciatic_mod, sciatic_freq, sciatic_pw):
    # time unit = 1ms; SI from 100us/V => 1mA/V
    """
    def time_pad_gen(status, freq, pw, on_time=60):
        time_pad_unit = [amp * status] * 300 + [0] * 700  # 1s template
        time_pad = time_pad_unit * 60  # 60s time pad
        return time_pad
    """

    switch = {1: 'on', 0: 'off'}

    amp = status * sciatic_mt * sciatic_mod / 10  # 10(mA/V)=[1*1(100uA/V)*100(mod)]/10

    with daq.Task() as task:
        task.ao_channels.add_ao_func_gen_chan(
            'Dev1/ao0', type=daq.constants.FuncGenType.SQUARE, freq=sciatic_freq, amplitude=amp)
        # task.ao_channels.ao_output_type(14750)                          # function generation
        task.ao_channels.ao_voltage_units(10348)                        # unit = volts
        # task.ao_channels.ao_func_gen_amplitude(amp)                       # 50-100MT/0 volt
        # task.ao_channels.ao_func_gen_freq(sciatic_freq)                         # 1Hz
        # task.ao_channels.ao_func_gen_type(14753)                        # square
        task.ao_channels.ao_func_gen_square_duty_cycle(
            sciatic_pw * sciatic_freq / 10)  # cycle% = PW/period(1000ms/freq)*100%
        task.ao_idle_output_behavior(12526)                             # generate 0V when idle
        task.timing.cfg_samp_clk_timing(1000000.0, sample_mode=10123)     # sampling at 1us, continuous output
        # task.ao_channels.ao_output_type(10322)                        # voltage mode
        # task.write(time_pad_gen(status, freq, pw=300), auto_start=True, timeout = 1)

        task.start()
        beep(5)
        print('\nSciatic stimulation is {0} (amp = {1}mA) for 60sec\n'
              .format(switch[status], amp))
        countdown(60)
        beep(1)
        task.stop()
        task.close()

    return


def scs(waveform, scs_freq, scs_mod, scs_mt):

    with daq.Task() as task:
        task.do_channels.add_do_chan('Dev1/port1/line0')     # PFI 0 /P1.0
        task.do_channels.chan_type(10153)                    # digit output
        task.do_channels.do_logic_family(14619)              # TTL/5V CMOS
        task.do_channels.do_output_drive_type(12573)         # active drive, low:0V, high:3.3/5V
        task.do_channels.do_line_states_start_state(10192)   # high (2.7V Output in TTL)
        task.do_channels.do_line_states_paused_state(10192)  # low  (0.5V Output in TTL)
        task.do_channels.do_line_states_done_state(10214)    # low

        beep(5)
        print('\n{0} stimulation at {1}Hz, {2}% MT: {3}\n'
              .format(waveform, scs_freq, scs_mod, scs_mt))
        task.start()
        countdown(20)
        beep(1)
        task.stop()
        task.close()

    return


def sample_trigger():

    with daq.Task() as task:
        task.do_channels.add_do_chan('Dev1/port1/line0')     # PFI 0 /P1.0
        task.do_channels.chan_type(10153)                    # digit output
        task.do_channels.do_logic_family(14619)              # TTL/5V CMOS
        task.do_channels.do_output_drive_type(12573)         # active drive, low:0V, high:3.3/5V
        task.do_channels.do_line_states_start_state(10192)   # high (2.7V Output in TTL)
        task.do_channels.do_line_states_paused_state(10192)  # low  (0.5V Output in TTL)
        task.do_channels.do_line_states_done_state(10214)    # low

        task.start()
        print('\nsampling starts...\n')
        time.sleep(1)
        task.stop()
        task.close()

    return


"""script for bppc and recording"""


def auto_su(scs_mt, scs_mod, sciatic_mt, sciatic_mod, waveform, scs_freq, status
            , scs_ontime=20, sciatic_freq=1, sciatic_pw=300):
    # timing clock: sciatic stim start at 0s, scs start at 20sec

    # check inputs/raise error before exec
    Timer(0, sample_trigger).start()
    Timer(1, wavegen, [waveform, scs_freq, scs_ontime, scs_mt, scs_mod]).start()
    Timer(1, sciatic, [status, sciatic_mt, sciatic_mod, sciatic_freq, sciatic_pw]).start()
    Timer(21, scs, [waveform, scs_freq, scs_mod, scs_mt]).start()

    return


def bppc(status, sciatic_mt, sciatic_mod, sciatic_freq, sciatic_pw):


    Timer(20, sciatic, [status, sciatic_mt, sciatic_mod, sciatic_freq, sciatic_pw]).start()

    pass


"""define variables"""
resources()
exp_rcd, scs_para, sciatic_para = exp_recd_para()
auto_su(**scs_para, **sciatic_para)







